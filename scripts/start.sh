#!/bin/bash

# PronoTurf - Script de d√©marrage complet
# D√©marre tous les services avec Docker Compose et v√©rifie leur sant√©

set -e

echo "================================================"
echo "üèá PronoTurf - D√©marrage de l'application"
echo "================================================"
echo ""

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå Erreur: docker-compose.yml non trouv√©"
    echo "   Veuillez ex√©cuter ce script depuis la racine du projet"
    exit 1
fi

# V√©rifier que les fichiers .env existent
echo "1Ô∏è‚É£  V√©rification de la configuration"
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö† Fichier .env manquant, copie depuis .env.example${NC}"
    cp .env.example .env
fi

if [ ! -f "backend/.env" ]; then
    echo -e "${YELLOW}‚ö† Fichier backend/.env manquant, copie depuis backend/.env.example${NC}"
    cp backend/.env.example backend/.env
fi

if [ ! -f "frontend/.env" ]; then
    echo -e "${YELLOW}‚ö† Fichier frontend/.env manquant, copie depuis frontend/.env.example${NC}"
    cp frontend/.env.example frontend/.env
fi
echo -e "${GREEN}‚úì Fichiers de configuration pr√™ts${NC}"
echo ""

# Arr√™ter les services existants si n√©cessaire
echo "2Ô∏è‚É£  Nettoyage des services existants"
if docker-compose ps | grep -q "Up"; then
    echo "   Arr√™t des services en cours..."
    docker-compose down
fi
echo -e "${GREEN}‚úì Nettoyage termin√©${NC}"
echo ""

# Construire les images
echo "3Ô∏è‚É£  Construction des images Docker"
echo "   Cela peut prendre quelques minutes la premi√®re fois..."
docker-compose build --no-cache
echo -e "${GREEN}‚úì Images construites${NC}"
echo ""

# D√©marrer les services
echo "4Ô∏è‚É£  D√©marrage des services"
docker-compose up -d
echo -e "${GREEN}‚úì Services d√©marr√©s${NC}"
echo ""

# Attendre que les services soient pr√™ts
echo "5Ô∏è‚É£  Attente que les services soient pr√™ts"
echo "   MySQL..."
timeout=60
counter=0
until docker-compose exec -T mysql mysqladmin ping -h localhost --silent 2>/dev/null || [ $counter -eq $timeout ]; do
    printf '.'
    sleep 2
    counter=$((counter + 2))
done

if [ $counter -eq $timeout ]; then
    echo -e "\n${YELLOW}‚ö† MySQL timeout, mais continue...${NC}"
else
    echo -e "\n${GREEN}‚úì MySQL pr√™t${NC}"
fi

echo "   Redis..."
counter=0
until docker-compose exec -T redis redis-cli ping &>/dev/null || [ $counter -eq $timeout ]; do
    printf '.'
    sleep 2
    counter=$((counter + 2))
done

if [ $counter -eq $timeout ]; then
    echo -e "\n${YELLOW}‚ö† Redis timeout, mais continue...${NC}"
else
    echo -e "\n${GREEN}‚úì Redis pr√™t${NC}"
fi

echo "   Backend API..."
counter=0
until curl -s http://localhost:8000/health &>/dev/null || [ $counter -eq $timeout ]; do
    printf '.'
    sleep 2
    counter=$((counter + 2))
done

if [ $counter -eq $timeout ]; then
    echo -e "\n${YELLOW}‚ö† Backend timeout, mais continue...${NC}"
else
    echo -e "\n${GREEN}‚úì Backend pr√™t${NC}"
fi

echo ""

# Initialiser la base de donn√©es si n√©cessaire
echo "6Ô∏è‚É£  V√©rification de la base de donn√©es"
table_count=$(docker-compose exec -T mysql mysql -u pronoturf_user -pPronoTurf_DB_2025! pronoturf -e "SHOW TABLES;" 2>/dev/null | wc -l)

if [ "$table_count" -le 1 ]; then
    echo "   Aucune table trouv√©e, initialisation..."
    docker-compose exec -T mysql mysql -u pronoturf_user -pPronoTurf_DB_2025! pronoturf < database/init.sql
    echo -e "${GREEN}‚úì Base de donn√©es initialis√©e${NC}"

    echo "   Import des donn√©es de test..."
    docker-compose exec -T mysql mysql -u pronoturf_user -pPronoTurf_DB_2025! pronoturf < database/seed.sql
    echo -e "${GREEN}‚úì Donn√©es de test import√©es${NC}"
else
    echo -e "${GREEN}‚úì Base de donn√©es d√©j√† initialis√©e ($((table_count - 1)) tables)${NC}"
fi
echo ""

# Afficher les logs des services
echo "7Ô∏è‚É£  √âtat des services"
docker-compose ps
echo ""

# Affichage final
echo "================================================"
echo "‚úÖ D√©marrage termin√© avec succ√®s!"
echo "================================================"
echo ""
echo -e "${BLUE}Services disponibles:${NC}"
echo "  üåê Frontend:        http://localhost:3000"
echo "  üîß Backend API:     http://localhost:8000"
echo "  üìö API Docs:        http://localhost:8000/api/v1/docs"
echo "  üìä Streamlit:       http://localhost:8501"
echo ""
echo -e "${BLUE}Comptes de test (mot de passe: Password123!):${NC}"
echo "  üë®‚Äçüíº Admin:           admin@pronoturf.ai"
echo "  üë§ Abonn√©:          subscriber@example.com"
echo "  üëÅ  Invit√©:          guest@example.com"
echo ""
echo -e "${BLUE}Commandes utiles:${NC}"
echo "  üìã Voir les logs:   docker-compose logs -f [service]"
echo "  üîç Healthcheck:     ./scripts/healthcheck.sh"
echo "  ‚èπ  Arr√™ter:         docker-compose down"
echo "  üîÑ Red√©marrer:      docker-compose restart [service]"
echo ""
echo "Pour v√©rifier que tout fonctionne correctement, ex√©cutez:"
echo "  ./scripts/healthcheck.sh"
echo ""
