version: '3.8'

services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: pronoturf-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-pronoturf}
      MYSQL_USER: ${MYSQL_USER:-pronoturf_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-pronoturf_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/seed.sql:/docker-entrypoint-initdb.d/02-seed.sql:ro
    networks:
      - pronoturf-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-root_password}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache et Message Broker Redis
  redis:
    image: redis:7-alpine
    container_name: pronoturf-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pronoturf-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

  # Backend API FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pronoturf-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql+aiomysql://${MYSQL_USER:-pronoturf_user}:${MYSQL_PASSWORD:-pronoturf_password}@mysql:3306/${MYSQL_DATABASE:-pronoturf}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-15}
      - REFRESH_TOKEN_EXPIRE_DAYS=${REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      # APIs Externes
      - ASPITURF_API_KEY=${ASPITURF_API_KEY:-}
      - ASPITURF_API_URL=${ASPITURF_API_URL:-https://api.aspiturf.com}
      - ASPITURF_ENABLED=${ASPITURF_ENABLED:-true}
      - TURFINFO_OFFLINE_URL=${TURFINFO_OFFLINE_URL:-https://offline.turfinfo.api.pmu.fr/rest/client/7}
      - TURFINFO_ONLINE_URL=${TURFINFO_ONLINE_URL:-https://online.turfinfo.api.pmu.fr/rest/client/61}
      - TURFINFO_ENABLED=${TURFINFO_ENABLED:-true}
      - OPENPMU_API_URL=${OPENPMU_API_URL:-https://open-pmu-api.vercel.app/api}
      - OPENPMU_ENABLED=${OPENPMU_ENABLED:-true}
      # Notifications
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_ENABLED=${TELEGRAM_ENABLED:-false}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@pronoturf.ai}
      - EMAIL_ENABLED=${EMAIL_ENABLED:-false}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pronoturf-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker pour tâches asynchrones
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pronoturf-celery-worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+aiomysql://${MYSQL_USER:-pronoturf_user}:${MYSQL_PASSWORD:-pronoturf_password}@mysql:3306/${MYSQL_DATABASE:-pronoturf}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # APIs Externes
      - ASPITURF_API_KEY=${ASPITURF_API_KEY:-}
      - ASPITURF_API_URL=${ASPITURF_API_URL:-https://api.aspiturf.com}
      - ASPITURF_ENABLED=${ASPITURF_ENABLED:-true}
      - TURFINFO_OFFLINE_URL=${TURFINFO_OFFLINE_URL:-https://offline.turfinfo.api.pmu.fr/rest/client/7}
      - TURFINFO_ONLINE_URL=${TURFINFO_ONLINE_URL:-https://online.turfinfo.api.pmu.fr/rest/client/61}
      - TURFINFO_ENABLED=${TURFINFO_ENABLED:-true}
      - OPENPMU_API_URL=${OPENPMU_API_URL:-https://open-pmu-api.vercel.app/api}
      - OPENPMU_ENABLED=${OPENPMU_ENABLED:-true}
      # Notifications
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_ENABLED=${TELEGRAM_ENABLED:-false}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@pronoturf.ai}
      - EMAIL_ENABLED=${EMAIL_ENABLED:-false}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - pronoturf-network
    command: celery -A app.tasks.celery_app worker --loglevel=info --concurrency=4

  # Celery Beat pour tâches planifiées
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pronoturf-celery-beat
    restart: unless-stopped
    environment:
      - DATABASE_URL=mysql+aiomysql://${MYSQL_USER:-pronoturf_user}:${MYSQL_PASSWORD:-pronoturf_password}@mysql:3306/${MYSQL_DATABASE:-pronoturf}
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      # APIs Externes
      - ASPITURF_API_KEY=${ASPITURF_API_KEY:-}
      - ASPITURF_API_URL=${ASPITURF_API_URL:-https://api.aspiturf.com}
      - ASPITURF_ENABLED=${ASPITURF_ENABLED:-true}
      - TURFINFO_OFFLINE_URL=${TURFINFO_OFFLINE_URL:-https://offline.turfinfo.api.pmu.fr/rest/client/7}
      - TURFINFO_ONLINE_URL=${TURFINFO_ONLINE_URL:-https://online.turfinfo.api.pmu.fr/rest/client/61}
      - TURFINFO_ENABLED=${TURFINFO_ENABLED:-true}
      - OPENPMU_API_URL=${OPENPMU_API_URL:-https://open-pmu-api.vercel.app/api}
      - OPENPMU_ENABLED=${OPENPMU_ENABLED:-true}
      # Notifications
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_ENABLED=${TELEGRAM_ENABLED:-false}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
      - SMTP_FROM_EMAIL=${SMTP_FROM_EMAIL:-noreply@pronoturf.ai}
      - EMAIL_ENABLED=${EMAIL_ENABLED:-false}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./backend:/app
      - ./ml_models:/app/ml_models
      - ./logs:/app/logs
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - pronoturf-network
    command: celery -A app.tasks.celery_app beat --loglevel=info

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: pronoturf-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
      - VITE_WS_URL=ws://localhost:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - pronoturf-network
    command: npm run dev -- --host 0.0.0.0

  # Dashboard Streamlit
  streamlit:
    build:
      context: ./streamlit
      dockerfile: Dockerfile
    container_name: pronoturf-streamlit
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER:-pronoturf_user}:${MYSQL_PASSWORD:-pronoturf_password}@mysql:3306/${MYSQL_DATABASE:-pronoturf}
      - REDIS_URL=redis://redis:6379/0
      - API_URL=http://backend:8000/api/v1
    volumes:
      - ./streamlit:/app
      - ./ml_models:/app/ml_models
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - pronoturf-network
    command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0

  # Nginx Reverse Proxy (optionnel pour production)
  # nginx:
  #   image: nginx:alpine
  #   container_name: pronoturf-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - backend
  #     - frontend
  #   networks:
  #     - pronoturf-network

# Volumes persistants
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

# Réseau pour communication inter-containers
networks:
  pronoturf-network:
    driver: bridge
    name: pronoturf-network
